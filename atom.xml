<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Helio Blog</title>
  
  <subtitle>Life is fantastic!😎</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-28T17:36:12.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>运输层协议概述</title>
    <link href="http://yoursite.com/2019/06/28/NetWorking01/"/>
    <id>http://yoursite.com/2019/06/28/NetWorking01/</id>
    <published>2019-06-28T08:32:18.000Z</published>
    <updated>2019-06-28T17:36:12.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/06/28/NetWorking01/wallhaven.jpg">                                                        <h1 id="你如何收到好友的QQ消息"><a href="#你如何收到好友的QQ消息" class="headerlink" title="你如何收到好友的QQ消息?"></a>你如何收到好友的QQ消息?</h1><p>&emsp;&emsp;你有没有想过这个问题，当你和朋友使用QQ进行聊天的时候，你的消息是如何发送到好友的手机或者电脑上去的呢？<br><a id="more"></a><br><img src="/2019/06/28/NetWorking01/ip.png" title="消息如何从好友哪里发送到你的主机上?"><br>&emsp;&emsp;在解决这个问题之前不妨先思考一下另一个问题。有一天远方的朋友给你写了一封信，快递员收到信件之后要把信件送到你的手中。首先他要做的是根据信件上的地址信息找到你家所在的<font color="#FF8C00">那一栋楼</font>，找到你家所在的那一栋楼之后，快递员会再根据你家的<font color="#FF8C00">门牌号</font>才能把信件送到你的手中。<br>&emsp;&emsp;同理，QQ上的消息要从好友哪里发送到你这里。第一步是要做的是要找到你的手机或者电脑在<font color="#FF8C00">网络中的地址(IP地址)</font>，找到你的设备在网络中的地址之后，你的设备中同时开启了<font color="#FF8C00">许多其他的网络应用</font>，消息仍然不知道发送到你的手机的哪个位置，为了把信息准确的送到QQ上而不是其他的应用上，必须使用<font color="#FF8C00">端口号</font>来区别设备上各种不同的网络的应用，至此消息就可以从好友QQ上准确的发送到你的QQ上了。</p><h1 id="什么是网络协议？"><a href="#什么是网络协议？" class="headerlink" title="什么是网络协议？"></a>什么是网络协议？</h1><p>&emsp;&emsp;首先让我们看一段解释:</p><blockquote><p>一个<strong>协议</strong>定义了在两个或多个通信实体之间交换的报文格式和次序，以及报文发送和/或接收一条报文或其他事件<font color="#FF8C00">所采取的动作</font>。</p></blockquote><p>&emsp;&emsp;咋看这个解释，可能是一头雾水。我们通过一个类比来解释一下。假如你忘记带手表了，这时你想向一个陌生人询问现在的时间，首先你要的做的是和陌生人打招呼(<font color="#FF8C00">发送报文</font>)。如果陌生人回应了你(<font color="#FF8C00">接收一条报文后采取的动作</font>)，你才能继续向她问时间。如果陌生人不会说中文，那么你们就不能进行后继的交流了。这是一个简单的人类之间进行交流的协议。<br><img src="/2019/06/28/NetWorking01/protocol.png" title="当使用相同的协议时才能进行正常的通信"><br>&emsp;&emsp;同理在计算机网络中，两个进行通信的设备也应该遵循相同的网络通信协议才能进行通信。<br><img src="/2019/06/28/NetWorking01/cantcom.png" title="当使用不同的通信协议时就无法进行正常的通信"></p><h1 id="因特网运输层概述"><a href="#因特网运输层概述" class="headerlink" title="因特网运输层概述"></a>因特网运输层概述</h1><p>&emsp;&emsp;运输层位于网络层之上应用层之下，该层为运行在不同主机上的<font color="orange">应用进程</font>提供直接的通信服务起着至关重要的作用。如果不同主机之间的应用进程要进行直接通信的话，唯一的方法是使用应用层的协议。<br>&emsp;&emsp;运输层上使用的协议主要有两种：UDP、TCP。下表展示处了两种协议分别会在什么应用中会被使用到。可以看出TCP协议通常被使用到对数据丢失不能忍受的应用上，如电子邮件、即时通信，因为TCP协议在传输数据的过程中不会造成数据的丢失。而UDP协议在传输的过程中会有些许的数据丢失，所以它通常会被应用到语音电话、视频电话等对数据丢失可以忍受的应用上。</p><table><thead><tr><th>应用</th><th>应用层协议</th><th>下面的运输协议</th></tr></thead><tbody><tr><td>电子邮件</td><td>SMTP</td><td>TCP</td></tr><tr><td>远程终端访问</td><td>Telnet</td><td>TCP </td></tr><tr><td>Web</td><td>HTTP</td><td>TCP</td></tr><tr><td>文件运输</td><td>FTP</td><td>TCP</td></tr><tr><td>远程文件服务器</td><td>NFS</td><td>通常UDP</td></tr><tr><td>流式多媒体</td><td>通常专用2</td><td>UDP或TCP</td></tr><tr><td>因特网电话</td><td>通常专用</td><td>UDP或TCP</td></tr></tbody></table><h1 id="面向连接的运输：TCP"><a href="#面向连接的运输：TCP" class="headerlink" title="面向连接的运输：TCP"></a>面向连接的运输：TCP</h1><p>&emsp;&emsp;TCP之所以是被称为<font color="orange">面向连接</font>的,是因为两台主机上下应用进程在进行通信之前，必须先<font color="orange">“握手”</font>即它们必须相互发送某些预备报文段，以建立连接，这是保证TCP协议用来传输数据可靠的手段之一。</p><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>&emsp;&emsp;前面谈到，TCP协议在进行通信之前会进行三次握手，三次握手之后，两台主机上的应用进程之间才会建立连接，那么三次握手是如何进行的呢？<br><img src="/2019/06/28/NetWorking01/tcp3.png" title="三次握手"><br>&emsp;&emsp;第一步：客户端的TCP首先向服务器的TCP发送一个特殊的<font color="orange">SYN报文段</font>(该报文段中不包括应用层数据),报文首部的标识位SYN会被置为1，同时报文中会加上客户端随机生成的一个初始序号(client_isn),将此编号放置于该起始的TCP SYN报文段的序号字段中。最后该报文段会被封装在一个IP数据报中，发送给服务器。<br>&emsp;&emsp;第二步：一旦包含TCP SYN报文段的IP数据报到达服务器主机，服务器会向客户端发送<font color="orange">允许连接报文(SYNACK报文段)</font>，该报文首部的标识位SYN会被置为0，同时报文中会加上服务器选择的初始序号(server_isn),将此编号放置到TCP报文段首部的序号字段中，同时TCP报文段的确认号字段被置为client_isn + 1。<br>&emsp;&emsp;第三步：在收到SYNACK报文段后，客户端也要给该连接分配缓存和变量。客户主机则向服务器发送另外一个报文段；这最后一个报文段对服务器的允许连接的报文段就像了确认(该客户通过将值server_isn + 1放置到TCP报文段首部的确认段中来完成此项工作)。因为连接邮件建立了，所以该SYN比特被置为0。<br>&emsp;&emsp;一旦这三个步骤顺利完成，客户端和服务器之间就可以相互通信了。</p><h1 id="无连接运输：UDP"><a href="#无连接运输：UDP" class="headerlink" title="无连接运输：UDP"></a>无连接运输：UDP</h1><p>&emsp;&emsp;顾名思义，UDP在应用进程间传输数据之前不需要像TCP那么麻烦的要与服务器进行三次握手，采用UDP时，只要应用进程将数据传输给UDP，UDP就会将此数据打包进报文段并立即将其传递给网络层，发送给远程主机。所以它就无法保证数据是否会被准确的交付到远程主机应用进程。</p><h1 id="UDP和TCP比较"><a href="#UDP和TCP比较" class="headerlink" title="UDP和TCP比较"></a>UDP和TCP比较</h1><p>&emsp;&emsp;UDP传输数据时不需要建立连接，但会丢失数据。TCP传输数据可靠。两个协议的不同特点导致他们使用的场合不同，在实际的开发中需要视工程的要求来决定使用哪一个协议。</p><table><thead><tr><th>-</th><th>UDP</th><th>TCP</th></tr></thead><tbody><tr><td>是否需要与远程主机建立连接</td><td>否</td><td>是</td></tr><tr><td>报文首部开销</td><td>8byte</td><td>20byte</td></tr><tr><td>数据传输可靠性</td><td>不可靠</td><td>可靠</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/06/28/NetWorking01/wallhaven.jpg&quot;&gt;                                                        
&lt;h1 id=&quot;你如何收到好友的QQ消息&quot;&gt;&lt;a href=&quot;#你如何收到好友的QQ消息&quot; class=&quot;headerlink&quot; title=&quot;你如何收到好友的QQ消息?&quot;&gt;&lt;/a&gt;你如何收到好友的QQ消息?&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;你有没有想过这个问题，当你和朋友使用QQ进行聊天的时候，你的消息是如何发送到好友的手机或者电脑上去的呢？&lt;br&gt;
    
    </summary>
    
      <category term="05 网络编程" scheme="http://yoursite.com/categories/05-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="计算机网络" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
      <category term="网络编程" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>多线程学习（二）</title>
    <link href="http://yoursite.com/2019/06/23/Thread02/"/>
    <id>http://yoursite.com/2019/06/23/Thread02/</id>
    <published>2019-06-23T10:41:31.000Z</published>
    <updated>2019-06-28T08:52:08.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/06/23/Thread02/wallhaven.jpg"><h2 id="向线程传递参数"><a href="#向线程传递参数" class="headerlink" title="向线程传递参数"></a>向线程传递参数</h2><p>&emsp;代码中实现了三种不同的方法向线程中传递参数。<br><a id="more"></a><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">                        written by helio, 2019</span></span><br><span class="line"><span class="comment">                            ThreadSample3</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> sample = <span class="keyword">new</span> ThreadSample(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ThreadOne  = <span class="keyword">new</span> Thread(sample.CountNumbers);</span><br><span class="line">            ThreadOne.Name = <span class="string">"ThreadOne"</span>;</span><br><span class="line">            ThreadOne.Start();</span><br><span class="line">            ThreadOne.Join();</span><br><span class="line">            Console.WriteLine(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ThreadTwo = <span class="keyword">new</span> Thread(Count);</span><br><span class="line">            ThreadTwo.Name = <span class="string">"ThreadTwo"</span>;</span><br><span class="line">            ThreadTwo.Start(<span class="number">8</span>);</span><br><span class="line">            ThreadTwo.Join();</span><br><span class="line">            Console.WriteLine(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> ThreadThree = <span class="keyword">new</span> Thread(() =&gt; CountNumbers(<span class="number">12</span>));</span><br><span class="line">            ThreadThree.Name = <span class="string">"ThreadThree"</span>;</span><br><span class="line">            ThreadThree.Start();</span><br><span class="line">            ThreadThree.Join();</span><br><span class="line">            Console.WriteLine(<span class="string">"------------------------"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">var</span> ThreadFour = <span class="keyword">new</span> Thread(() =&gt; PrintNumber(i));</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">var</span> ThreadFive = <span class="keyword">new</span> Thread(() =&gt; PrintNumber(i));</span><br><span class="line">            ThreadFour.Start();</span><br><span class="line">            ThreadFive.Start();</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Count</span>(<span class="params"><span class="keyword">object</span> iterations</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CountNumbers((<span class="keyword">int</span>)iterations);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CountNumbers</span>(<span class="params"><span class="keyword">int</span> iterations</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= iterations; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(TimeSpan.FromMilliseconds(<span class="number">0.5</span>));</span><br><span class="line">                Console.WriteLine(<span class="string">"&#123;0&#125; prins &#123;1&#125;"</span>,</span><br><span class="line">                    Thread.CurrentThread.Name, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PrintNumber</span>(<span class="params"><span class="keyword">int</span> number</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(number);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">ThreadSample</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="keyword">int</span> m_iterations;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">ThreadSample</span>(<span class="params"><span class="keyword">int</span> iterations</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                m_iterations = iterations;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CountNumbers</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m_iterations; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Thread.Sleep(TimeSpan.FromSeconds(<span class="number">0.5</span>));</span><br><span class="line">                    Console.WriteLine(<span class="string">"&#123;0&#125; prints &#123;1&#125;"</span>,</span><br><span class="line">                        Thread.CurrentThread.Name, i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>&emsp;当主程序启动时，首先创建了ThreadSample类的一个对象，并提供了一个迭代次数。然后使用该对象的CounetNumbers方法启动线程。该方法运行在另一个线程中，但是使用数字10，该数字是通过ThreadSample对象的构造函数传入的。</p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>&emsp;另一种传递数据的方式是使用Thread.Staru方法。该方法会节后一个对象，并将该对象传递给线程。为了应用该方法，在线程启动的方法必须接收object类型的单个参数。</p><h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><p>&emsp;接下来的方式是使用lambda表达式。这可能会导致几个问题。例如，如果在多个lanbda表达式中使用相同的变量，他们会共享该变量。当启动ThreadFour和ThreadFive线程时，他们都会打印20，因为在这两个线程启动之前变量被修改为20。</p><h3 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h3><h4 id="为什么要用线程锁？"><a href="#为什么要用线程锁？" class="headerlink" title="为什么要用线程锁？"></a>为什么要用线程锁？</h4><p>&emsp;&emsp;所谓同步，是指多个线程之间存在先后执行的顺序的关联关系。如果一个线程必须在两一个线程完成某个工作后才能继续执行，则必须考虑如何让让其保持同步，以确保在系统上同时运行多个线程而不会出现死锁或逻辑错误。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">                        written by helio, 2019</span></span><br><span class="line"><span class="comment">                            ThreadSample4</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LockSample1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Thread[] threads = <span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line">            Account acc = <span class="keyword">new</span> Account(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread t = <span class="keyword">new</span> Thread(acc.AutoWithdraw);</span><br><span class="line">                t.Name = <span class="string">"Thread"</span> + i;</span><br><span class="line">                threads[i] = t;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">                threads[i].Start();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title">Account</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> Object lockedObj = <span class="keyword">new</span> <span class="keyword">object</span>();</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> m_balenace;</span><br><span class="line">            Random r = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="title">Account</span>(<span class="params"><span class="keyword">int</span> initial</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                m_balenace = initial;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Withdraw</span>(<span class="params"><span class="keyword">int</span> amount</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Thread.Sleep(TimeSpan.FromMilliseconds(<span class="number">100</span>));</span><br><span class="line">                <span class="keyword">if</span> (m_balenace &lt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"余额不足！"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">lock</span> (lockedObj)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (m_balenace &gt;= amount)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.Write(<span class="string">"&#123;0&#125;取款---取款前余额：&#123;1&#125; 取款 &#123;2&#125;    "</span>, Thread.CurrentThread.Name, m_balenace, amount);</span><br><span class="line">                        m_balenace -= amount;</span><br><span class="line">                        Console.WriteLine(<span class="string">"取款后余额：&#123;0&#125;"</span>, m_balenace);</span><br><span class="line">                        <span class="keyword">return</span> amount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AutoWithdraw</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Withdraw(r.Next(<span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/06/23/Thread02/wallhaven.jpg&quot;&gt;
&lt;h2 id=&quot;向线程传递参数&quot;&gt;&lt;a href=&quot;#向线程传递参数&quot; class=&quot;headerlink&quot; title=&quot;向线程传递参数&quot;&gt;&lt;/a&gt;向线程传递参数&lt;/h2&gt;&lt;p&gt;&amp;emsp;代码中实现了三种不同的方法向线程中传递参数。&lt;br&gt;
    
    </summary>
    
      <category term="04 C#基础" scheme="http://yoursite.com/categories/04-C-%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/04-C-%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>多线程学习（一）</title>
    <link href="http://yoursite.com/2019/06/23/Thread01/"/>
    <id>http://yoursite.com/2019/06/23/Thread01/</id>
    <published>2019-06-23T10:25:25.000Z</published>
    <updated>2019-07-01T00:41:36.138Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><img src="/2019/06/23/Thread01/wallhaven.jpg"><h1 id="什么是进程和线程？"><a href="#什么是进程和线程？" class="headerlink" title="什么是进程和线程？"></a>什么是进程和线程？</h1><p>&emsp;&emsp;在进行多线程学习之前，我们首先要搞懂线程和进程这两个概念。<br><a id="more"></a>  </p><ul><li><font size="4"><strong>进程</strong></font>: 当你浏览网页的时候可以边听着歌，同时你的QQ也打开了。此时，在你的Windows上运行的所有应用程序(QQ、QQ音乐、火狐浏览器)都可以被成为一个<font color="orange">进程</font>。</li><li><font size="4"><strong>线程</strong></font>: 当你使用火狐浏览器阅读一个网页的时候，浏览器也同时可以在下载文件，此时浏览器为了让你在下载文件的同时可以你浏览网页，会开启<font color="orange">两个线程</font>来处理这种情况：<font color="orange">一个线程</font>用来浏览网页，<font color="orange">另一个线程</font>用来下载文件，这两个线程会各自做自己的事情互不干扰。<img src="/2019/06/23/Thread01/Task.png" title="浏览网页的同时下载文件"></li></ul><p>&emsp;&emsp;当系统创建一个进程的时候，会自动为进程创建一个线程，这个线程被成为应用进程的主线程。然后这个主线程会再创建更多的线程。</p><ul><li><font size="4"><strong>多线程原理</strong></font>: 对于所有要运行的线程，操作系统会轮流为每个线程分配一些CPU时间。它会采取循环的方式，为每个线程都分配时间片，从而营造出所有线程并行的”假象”。<img src="/2019/06/23/Thread01/Mul.png" title="操作系统会轮流为每个线程分配一些CPU时间"><h1 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h1>&emsp;&emsp;在开始线程编程之前先看几个线程相关的函数。</li></ul><blockquote><font color="orange">Thread thread = new Thread(ParameterizedThreadStart start); </font></blockquote><p>&emsp;&emsp;为了开启一个新的线程，首先要初始化Thread类的新实例 thread, 参数<font color="orange">start</font>表示开始执行线程时要调用的方法委托。也就是说线程开始后会跳转到 start 函数内部运行。 </p><blockquote><font color="orange">thread.Start(); </font></blockquote><p>&emsp;&emsp;之后可以使用Thread类的方法Start()方法启动线程。</p><p>&emsp;&emsp;为了模拟使用浏览器阅读一个网页的时候，同时也可以下载文件。我们在程序中使用了两个线程：一个主线程和一个thread_donwnload线程，主线程会不断递增并打印阅读的进度，而thread_download线程会不断递增并打印下载的进度。程序具体程序如下 :<br><br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------------------------------</span></span><br><span class="line"><span class="comment">                    written by helio, 2019</span></span><br><span class="line"><span class="comment">        ThreadSample1 - 使用线程模拟边浏览网页边下载</span></span><br><span class="line"><span class="comment">-------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample01</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 开启一个用来模拟下载的线程</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Download</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Download Start."</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">                    Console.WriteLine(<span class="string">"Downloading &#123;0&#125;%"</span>, i);</span><br><span class="line">                Console.WriteLine(<span class="string">"Download finished!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> 主线程模拟阅读浏览器</span></span><br><span class="line">            <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">            <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"Read Start."</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">                    Console.WriteLine(<span class="string">"Reading &#123;0&#125;%"</span>, i);</span><br><span class="line">                Console.WriteLine(<span class="string">"Reading finished!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>            &#123;</span><br><span class="line">                Thread thread_download = <span class="keyword">new</span> Thread(Download);</span><br><span class="line">                thread_download.Start();</span><br><span class="line"></span><br><span class="line">                Read();</span><br><span class="line">                Console.ReadKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2019/06/23/Thread01/sample01.png"><p>&emsp;&emsp;从程序运行结果可以观察到阅读进度和下载进度是在交替增加的，可以看出主线程和thread_download线程是在一种并行的状态，此时可以说我们成功的模拟了边浏览网页边下载。</p><h1 id="其他线程相关函数"><a href="#其他线程相关函数" class="headerlink" title="其他线程相关函数"></a>其他线程相关函数</h1><p>&emsp;&emsp;创建线程只是最基本的线程操作函数，如下表格列出了另外几个比较常用的线程操作函数。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td><font color="orange">Sleep方法</font></td><td>将当前线程挂起指定的时间</td></tr><tr><td><font color="orange">Join方法</font></td><td>将指定的线程合并到当前线程中，并阻止当前线程，直至指定的线程结束或者经过了指定时间。</td></tr><tr><td><font color="orange">Abort方法</font></td><td>在调用此方法的线程上引发 System.Threading.ThreadAbortException，以开始终止此线程的过程,调用此方法通常会终止线程。</td></tr></tbody></table><p>&emsp;&emsp;现有三个要完成的任务Main、TaskOne、TaskTwo。要求如下:</p><blockquote><ul><li>第一个任务要和第二个任务同时执行.</li><li>第三个任务必须等到第二个任务开始后才能执行。</li><li>第二个任务必须等待第三个任务完成后才能继续其任务。</li><li>第三个任务需要执行到一半的时候终止。</li></ul></blockquote><img src="/2019/06/23/Thread01/MultiTask.png" title="任务要求"><p>&emsp;&emsp;为了实现上诉需求，我们首先要做的是在Main函数的主线程中开启一个线程用来执行TaskOne,之后在TaskOne线程中开启一个线程用来执行TaskTwo。<br>&emsp;&emsp;启动TaskTwo线程后，为了满足第三个条件，可以使用Join方法，使得TaskOne线程必须等待TakskTow线程执行完成轴才能继续执行;<br>&emsp;&emsp;为了使得TaskTwo执行到一半时终止，我们可以在TaskTwo所在的线程中使用Abort方法，强制终止线程。至此，上诉四个需求都可得到满足，具体实现见如下代码 :</p><font size="4"><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------------------------------------------------</span></span><br><span class="line"><span class="comment">            written by helio, 2019</span></span><br><span class="line"><span class="comment">        ThreadSample2.cs - 完成三个任务</span></span><br><span class="line"><span class="comment">---------------------------------------------------------*/</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ThreadSample02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TaskOne</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"TackOne Start..."</span>);</span><br><span class="line">            Thread thread_tacktwo = <span class="keyword">new</span> Thread(TaskTwo);</span><br><span class="line">            thread_tacktwo.Start();</span><br><span class="line">            <span class="comment">// 必须等待tasktwo 执行完才能继续执行taskone</span></span><br><span class="line">            thread_tacktwo.Join();</span><br><span class="line">            Console.WriteLine(<span class="string">"TaskTwo Finished..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TaskTwo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;            </span><br><span class="line">            Console.WriteLine(<span class="string">"TaskTwo Start."</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">"TaskTwo &#123;0&#125;%"</span>, i * <span class="number">5</span>);</span><br><span class="line">                <span class="comment">// TaskTwo执行到一本时被强制终止</span></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"TaskTwo Abort!"</span>);</span><br><span class="line">                    Thread.CurrentThread.Abort();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Read Start."</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">20</span>; i++)          </span><br><span class="line">                Console.WriteLine(<span class="string">"Reading &#123;0&#125;%"</span>, i * <span class="number">5</span>);                       </span><br><span class="line">            Console.WriteLine(<span class="string">"Reading finished!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;           </span><br><span class="line">            Thread thread_tackone = <span class="keyword">new</span> Thread(TaskOne);          </span><br><span class="line">            thread_tackone.Start();</span><br><span class="line">                                 </span><br><span class="line">            Read();</span><br><span class="line">            </span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2019/06/23/Thread01/wallhaven.jpg&quot;&gt;
&lt;h1 id=&quot;什么是进程和线程？&quot;&gt;&lt;a href=&quot;#什么是进程和线程？&quot; class=&quot;headerlink&quot; title=&quot;什么是进程和线程？&quot;&gt;&lt;/a&gt;什么是进程和线程？&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在进行多线程学习之前，我们首先要搞懂线程和进程这两个概念。&lt;br&gt;
    
    </summary>
    
      <category term="04 C#基础" scheme="http://yoursite.com/categories/04-C-%E5%9F%BA%E7%A1%80/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/04-C-%E5%9F%BA%E7%A1%80/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU学习(四):与其他设备通信</title>
    <link href="http://yoursite.com/2019/04/04/NodeMCU04/"/>
    <id>http://yoursite.com/2019/04/04/NodeMCU04/</id>
    <published>2019-04-04T09:07:24.000Z</published>
    <updated>2019-06-23T10:39:19.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h1><p>&nbsp;&nbsp;TCP是计算机网络中运输层协议，是应用层协议http协议的支撑协议。两台远程主机之间可以通过TCP协议进行通信并交换信息，前提是，相互通信的两台主机之间知道彼此的IP地址和端口号。<br><a id="more"></a><img src="/2019/04/04/NodeMCU04/图片1.png" title="图4-1 打开网络调试助手，并将其设置为TCP Server"> </p><h1 id="NodeMCU作为TCP客户端实现局域网内点亮Led灯（通过路由器中转）"><a href="#NodeMCU作为TCP客户端实现局域网内点亮Led灯（通过路由器中转）" class="headerlink" title="NodeMCU作为TCP客户端实现局域网内点亮Led灯（通过路由器中转）"></a>NodeMCU作为TCP客户端实现局域网内点亮Led灯（通过路由器中转）</h1><p>&nbsp;&nbsp;NodeMCU可以被配置为一个TCP客户端，同时将一台网络设备（如电脑）配置为TCP服务器端，将NodeMCU连接到已经配置好的TCP服务器端上后，两者即可进行通信。<br>&nbsp;&nbsp;通信方法有两种，方法一是将NodeMCU设置为Soft AP模式，让电脑之间连接到它的WiFi上之后再与它进行通信。方法二是将NodeMCU和电脑同时连接到一个WiFi上，这样做的好处是与NodeMCU通信的设备数量不会受到较大的限制，因为将NodeMCU设置为<br>SoftAP模式时，最大可以连接到其上的设备数为8个。<br>&nbsp;&nbsp;首先使用方法二使两者连接到一起并进行通信，打开网络调试助手，将其协议类型设置为TCP Server(如图4-1)，更改本地端口号为任意值，在本次实验中被设置为1234。记住TCP Server的IP地址和端口号之后，将其打开(连接)。将程序中的IP地址和端口号换成上面设置好的值，并把NodeMCU的D0端口连接上一个Led，将程序烧录到Node MCU中。完成之后在网络调试助手中发送“0”或者“1”就会改变Led的状态。<br>NodeMCU程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------------------------</span></span><br><span class="line"><span class="comment">           written by helio, 2019</span></span><br><span class="line"><span class="comment">WiFiLed.ino - NodeMCU连接到路由器WiFi，将其配置为TCP客户端同时</span></span><br><span class="line"><span class="comment">与连接到路由器上的Tcp服务器设备（手机或电脑）建立Tcp连接</span></span><br><span class="line"><span class="comment">------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Led = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *RemoteIp = <span class="string">"192.168.1.105"</span>; <span class="comment">// 设置远程主机Ip地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> RemotePort = <span class="number">1234</span>; <span class="comment">// 设置远程主机端口号</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ESP8266WiFi.h"</span></span></span><br><span class="line"></span><br><span class="line">WiFiClient client; <span class="comment">// 创建Tcp客户端</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  WiFi.begin(<span class="string">"CEET305"</span>, <span class="string">"office305"</span>);  <span class="comment">// 设置连接到的WiFi名称和密码</span></span><br><span class="line">  Serial.print(<span class="string">"Connecting..."</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED)</span><br><span class="line">  &#123;</span><br><span class="line">    delay(<span class="number">500</span>);</span><br><span class="line">    Serial.print(<span class="string">"."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.println(WiFi.localIP()); <span class="comment">// 打印NodeMCU的IP地址</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">if</span> (!client.connect(RemoteIp, RemotePort)) <span class="comment">// 建立tcp连接</span></span><br><span class="line">  &#123;</span><br><span class="line">    Serial.println(<span class="string">"Connected failed!"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pinMode(Led, OUTPUT); <span class="comment">// 设置GPIO16为输出模式</span></span><br><span class="line">  digitalWrite(Led, LOW); <span class="comment">// 初始时，GPIO16输出低电平 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (client.available())  </span><br><span class="line">  &#123;    </span><br><span class="line">    <span class="keyword">char</span> ch = client.read(); <span class="comment">// 读取远程网络串口发来的数据</span></span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">'0'</span>)</span><br><span class="line">      digitalWrite(Led, LOW); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'1'</span>)</span><br><span class="line">      digitalWrite(Led, HIGH);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="WiFiLed-ino函数解析"><a href="#WiFiLed-ino函数解析" class="headerlink" title="WiFiLed.ino函数解析"></a>WiFiLed.ino函数解析</h2><p>&nbsp;&nbsp;实例化一个 WiFiClient 对象，对象名称为client。WiFiClient类是在esp8266库中已经封装好的一个TCP客户端，使用它可以实现TCP客户端的实例化，与TCP服务器的连接、通信、状态判断等功能。随后，通过WiFiClient类的一个成员函数 connect() 设置需要连接的服务器的 IP地址和端口号，并与远程TCP服务器建立连接，通过其返回值判断是否连接成功。连接成功后，即可与服务器进行通信，通过类的成员函数 isavailable() 函数判断是否有消息从服务器端发送过来，并根据消息的内容对NodeMCU上GPIO16口的Led灯进行控制。</p><h1 id="NodeMCU作为TCP服务器端实现局域网内点亮Led灯（不使用路由器）"><a href="#NodeMCU作为TCP服务器端实现局域网内点亮Led灯（不使用路由器）" class="headerlink" title="NodeMCU作为TCP服务器端实现局域网内点亮Led灯（不使用路由器）"></a>NodeMCU作为TCP服务器端实现局域网内点亮Led灯（不使用路由器）</h1><p>&nbsp;&nbsp;第二种方法是将NodeMCU设置为softAP模式，相当于一种热点模式，设置好其WiFi的名字和密码之后，电脑（TCP客户端）即可通过WiFi连接到其上并与之进行通信。</p><p>&nbsp;&nbsp;首先把Led灯连接到NodeMCU的GPIO16口，之后将程序烧录至NodeMCU中之后，在串口监视器中可以看到设置成softAP模式成功（如图4-2），同时可以获知NodeMCU的IP地址。同时在电脑的WiFi管理中心中也可以看到刚刚设置的WiFi，将电脑连接到此WiFi。<br><img src="/2019/04/04/NodeMCU04/图片2.png" title="图4-2 程序烧录至NodeMCU中之后打开串口监视器"> </p><p>&nbsp;&nbsp;之后，在网络调试助手中（如图4-3），将协议类型设置为TCP Client，同时将IP地址设置为刚刚在串口监视器中得到的IP地址，端口设置为在程序中已经设置好的端口好。完成以上步骤之后，连接到TCP Server，连接上之后马上就会收到来自TCP Server发送来的消息“Hello from NodeMCU”，在TCP Client中发送”0”或者”1”即可控制Server端-NodeMCU上的Led灯。</p><img src="/2019/04/04/NodeMCU04/图片3.png" title="图4-3 设置网络调试助手"> <p>NodeMCU程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------------------------------------------------</span></span><br><span class="line"><span class="comment">                    written by helio, 2019</span></span><br><span class="line"><span class="comment">SoftApLed.ino - 将NodeMCU设置为soft-AP模式（热点模式）其他设备</span></span><br><span class="line"><span class="comment">可以连接到该热点,并将NodeMCU设置为Tcp服务器端，同时将其他设备（</span></span><br><span class="line"><span class="comment">手机，电脑）配置为Tcp客户端，并连接到NodeMCU服务器上，向其发送</span></span><br><span class="line"><span class="comment">控制消息</span></span><br><span class="line"><span class="comment">------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Led = <span class="number">16</span>;          <span class="comment">// 将Led连接到GPIO16端口</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LocalPort = <span class="number">8266</span>; <span class="comment">// 设置ModeMCU端口</span></span><br><span class="line"></span><br><span class="line"><span class="function">WiFiServer <span class="title">server</span><span class="params">(LocalPort)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">"Setting soft_AP..."</span>); </span><br><span class="line">  <span class="keyword">if</span> (WiFi.softAP(<span class="string">"ESP8266"</span>, <span class="literal">NULL</span>))</span><br><span class="line">    Serial.print(<span class="string">"Ready"</span>);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    Serial.print(<span class="string">"Failed"</span>);  </span><br><span class="line"></span><br><span class="line">  Serial.println();</span><br><span class="line">  server.begin();</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"TcpServerstarted,%s"</span>, WiFi.softAPIP().toString().c_str());</span><br><span class="line">  </span><br><span class="line">  pinMode(Led, OUTPUT);</span><br><span class="line">  digitalWrite(Led, LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">  WiFiClient client = server.available(); <span class="comment">// 等待客户端连接</span></span><br><span class="line">  <span class="keyword">if</span> (client)</span><br><span class="line">  &#123;</span><br><span class="line">    client.write(<span class="string">"Hello from NodeMCU"</span>);</span><br><span class="line">    Serial.println(<span class="string">"Client connected"</span>);</span><br><span class="line">    <span class="keyword">while</span> (client.connected())  <span class="comment">// 当客户端保持连接时，从客户端读取数据</span></span><br><span class="line">    &#123;      </span><br><span class="line">      <span class="keyword">if</span> (client.available()) <span class="comment">// 当客户端发送数据时</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = client.read();        </span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'0'</span>)  </span><br><span class="line">          digitalWrite(Led, LOW);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">'1'</span>)</span><br><span class="line">          digitalWrite(Led, HIGH);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  client.stop();  <span class="comment">// 断开连接  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="SoftApLed-ino-解析"><a href="#SoftApLed-ino-解析" class="headerlink" title="SoftApLed.ino 解析"></a>SoftApLed.ino 解析</h2><p>&nbsp;&nbsp;实例化一个WiFi Serve类的对象server,并设置server的端口号，随后将Node MCU使用函数WiFi.softAP()设置为SoftAP模式，同时通过函数WiFi.softAPIP()获得其IP地址并打印到串口上，在loop循环中，通过WiFiServer类的一个成员函数available()等待客户端的连接，当有客户端连接至NodeMCU之后，通过client.write()函数往客户端发送“Hello from Node MCU”字符串并与客户端保持连接，再通过WiFiClient类的一个成员函数available接收从客户端发来的数据并通过其发送来的数据的不同从而控制NodeMCU上的Led灯。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;TCP连接&quot;&gt;&lt;a href=&quot;#TCP连接&quot; class=&quot;headerlink&quot; title=&quot;TCP连接&quot;&gt;&lt;/a&gt;TCP连接&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;TCP是计算机网络中运输层协议，是应用层协议http协议的支撑协议。两台远程主机之间可以通过TCP协议进行通信并交换信息，前提是，相互通信的两台主机之间知道彼此的IP地址和端口号。&lt;br&gt;
    
    </summary>
    
      <category term="03 Geek" scheme="http://yoursite.com/categories/03-Geek/"/>
    
      <category term="NodeMCU开发" scheme="http://yoursite.com/categories/03-Geek/NodeMCU%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="单片机开发" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU学习(三):进入网络世界</title>
    <link href="http://yoursite.com/2019/03/31/NodeMCU03/"/>
    <id>http://yoursite.com/2019/03/31/NodeMCU03/</id>
    <published>2019-03-31T07:34:24.000Z</published>
    <updated>2019-06-23T10:39:26.951Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="把NodeMCU连接到路由器网络上"><a href="#把NodeMCU连接到路由器网络上" class="headerlink" title="把NodeMCU连接到路由器网络上"></a>把NodeMCU连接到路由器网络上</h1><p>&nbsp;&nbsp;NodeMCU可以被配置为Station模式和softAP模式或者Station + AP模式，当它被配置为Station模式时，就可以去连接Access Point（如路由器）。当它被配置为Soft Access Point模式时，其他的Station（如手机、电脑）就可以连接到它，并与它进行通信。当它被配置为Station + AP模式时，即可作为Station也可以作为Access Point。<br><a id="more"></a><img src="/2019/03/31/NodeMCU03/图片5.png" title="图3-1 模块被配置为Station模式"><br><img src="/2019/03/31/NodeMCU03/图片6.png" title="图3-2 模块被配置为SoftAP模式"><br>&nbsp;&nbsp;使用如下程序配置NodeMCU将其连接到路由器上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*--------------------------------------------------</span><br><span class="line">                  written by helio, 2019</span><br><span class="line">  ConnectToWifi.ino - 串口打印NodeMCU连接到路由器WiFi</span><br><span class="line">名称和密码，并打印自身ip地址</span><br><span class="line">--------------------------------------------------*/</span><br><span class="line">#include &quot;ESP8266WiFi.h&quot;</span><br><span class="line"></span><br><span class="line">void setup()</span><br><span class="line">&#123;</span><br><span class="line">  Serial.begin(115200);</span><br><span class="line">  Serial.println();</span><br><span class="line">  </span><br><span class="line">  WiFi.begin(&quot;CEET305&quot;, &quot;office305&quot;);  // 设置连接到的WiFi名称和密码</span><br><span class="line">  Serial.print(&quot;Connecting...&quot;);</span><br><span class="line">  </span><br><span class="line">  while (WiFi.status() != WL_CONNECTED)</span><br><span class="line">  &#123;</span><br><span class="line">    delay(500);</span><br><span class="line">    Serial.print(&quot;.&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.print(&quot;Connected Succeful to &quot;);</span><br><span class="line">  Serial.println(WiFi.SSID()); // 打印连接到的WiFi名称</span><br><span class="line">  Serial.print(&quot;The Password of this WiFi is:&quot;);</span><br><span class="line">  Serial.println(WiFi.psk()); // 打印连接到的WiFi的密码</span><br><span class="line">  Serial.print(&quot;IP-address is:&quot;);</span><br><span class="line">  Serial.println(WiFi.localIP()); // 打印NodeMCU的IP地址</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop()</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ConnectToWifi-ino解析"><a href="#ConnectToWifi-ino解析" class="headerlink" title="ConnectToWifi.ino解析"></a>ConnectToWifi.ino解析</h2><p>&nbsp;&nbsp;通过函数 WiFi.begin() 设置即将连接的WiFi名称和密码并连接到给定的WiFi。随后根据函数 WiFi.status() 的返回值判断是否连接得到WiFi上，如果此函数的返回值WL_CONNECTED 则说明已经连接到给定WiFi上，否则没有连接上，通过一个循环来等待NodeMCU连接到WiFi上。当连接成功后在串口中通过函数WiFi.SSID()打印连接到的WiFi的名称，通过函数WiFi.psk()打印连接上的WiFi的密码，同时通过函数WiFi.localIP()打印此时NodeMCU的IP地址。<br>&nbsp;&nbsp;程序烧录到NodeMCU中后，打开串口监视器，可以看见NodeMCU成功连接到了设置的网络中。</p><img src="/2019/03/31/NodeMCU03/图片7.png" title="图3-3 NodeMCU成功连接到路由器网络"> <h1 id="其他设备连接到NodeMCU上"><a href="#其他设备连接到NodeMCU上" class="headerlink" title="其他设备连接到NodeMCU上"></a>其他设备连接到NodeMCU上</h1><p>&nbsp;&nbsp;将NodeCMCU设置为SoftAP模式时，其他设备就可以在网络中发现它，并且可以连接到它上面。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------------------------------------------</span></span><br><span class="line"><span class="comment">             written by helio, 2019</span></span><br><span class="line"><span class="comment">  SoftAp.ino - 将NodeMCU设置为soft-AP模式（热点模式）</span></span><br><span class="line"><span class="comment">其他设备可以连接到该热点</span></span><br><span class="line"><span class="comment">-------------------------------------------------*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line">  Serial.println(<span class="string">"Setting soft_AP..."</span>);</span><br><span class="line">  boolean result = WiFi.softAP(<span class="string">"Helio"</span>, <span class="string">"Helio1122"</span>);</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="literal">true</span>)</span><br><span class="line">    Serial.println(<span class="string">"Ready"</span>);</span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">    Serial.println(<span class="string">"Failed!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"Stations connected = %d\n"</span>, WiFi.softAPgetStationNum());</span><br><span class="line">  delay(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SoftAP-ino解析"><a href="#SoftAP-ino解析" class="headerlink" title="SoftAP.ino解析"></a>SoftAP.ino解析</h2><p>&nbsp;&nbsp;通过函数WiFi.softAP()设置将要设置的热点名称和密码，如果将函数的第二个参数值设置为 NULL 时，则其他设备不需要设置密码即可连接该热点，同时，根据函数的返回值判断是否创建成功，同时在串口中打印反馈信息。设置成功后在，可以通过函数WiFI.softAPgetStarion() 获知连接到其上的设备数。<br>&nbsp;&nbsp;将程序烧录到NodeMCU中后，打开电脑或者手机的WiFi管理界面即可发现它设置的网络。</p><img src="/2019/03/31/NodeMCU03/图片8.png" title="图3-4 可以在电脑的WiFi管理中心中发现之前设置的网络"> <p>&nbsp;&nbsp;同样打开串口监视器，可以在看到连接到NodeMCU上的设备数量。<br><img src="/2019/03/31/NodeMCU03/图片9.png" title="图3-5 串口监视器中可以查看NodeMCU设置的WiFi状态"> </p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;把NodeMCU连接到路由器网络上&quot;&gt;&lt;a href=&quot;#把NodeMCU连接到路由器网络上&quot; class=&quot;headerlink&quot; title=&quot;把NodeMCU连接到路由器网络上&quot;&gt;&lt;/a&gt;把NodeMCU连接到路由器网络上&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;NodeMCU可以被配置为Station模式和softAP模式或者Station + AP模式，当它被配置为Station模式时，就可以去连接Access Point（如路由器）。当它被配置为Soft Access Point模式时，其他的Station（如手机、电脑）就可以连接到它，并与它进行通信。当它被配置为Station + AP模式时，即可作为Station也可以作为Access Point。&lt;br&gt;
    
    </summary>
    
      <category term="03 Geek" scheme="http://yoursite.com/categories/03-Geek/"/>
    
      <category term="NodeMCU开发" scheme="http://yoursite.com/categories/03-Geek/NodeMCU%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="单片机开发" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU学习(二):如何使用NodeMCU进行开发</title>
    <link href="http://yoursite.com/2019/03/31/NodeMCU02/"/>
    <id>http://yoursite.com/2019/03/31/NodeMCU02/</id>
    <published>2019-03-31T07:21:59.000Z</published>
    <updated>2019-06-23T10:39:13.753Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NodeMCU的GPIO口"><a href="#NodeMCU的GPIO口" class="headerlink" title="NodeMCU的GPIO口"></a>NodeMCU的GPIO口</h1><p>&nbsp;&nbsp;Arduino的引脚号与NodeMCU的GPIO口直接对应,NodeMCU的GPIO函数pinMode,  digitalWrite, DigitalRead也是和Arduino中相同,如果要读取GPIO2引脚的电平，可以使用digitaiRead(2);引脚号0-15可以被用作INPUT,OUTPUT,或者INPUT_PULLUP。Pin16可以被用作INPUT,OUTPUT或INPUT_PULLDOWN_16,初始化时，所有引脚被配置为INPUT。<br><a id="more"></a><img src="/2019/03/31/NodeMCU02/图片4.png" title="图1-1 NodeMCU引脚图"> </p><h1 id="使用NodeMCU点亮LED灯"><a href="#使用NodeMCU点亮LED灯" class="headerlink" title="使用NodeMCU点亮LED灯"></a>使用NodeMCU点亮LED灯</h1><p>&nbsp;&nbsp;新建工程，将GPIO16口设置为输出端口，编程实现使得GPIO16口上的Led灯交替闪烁。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------------------------</span></span><br><span class="line"><span class="comment">        written by helio, 2019</span></span><br><span class="line"><span class="comment">HelloNodeMcu.ino - 使用NodeMCU点亮一个LED灯</span></span><br><span class="line"><span class="comment">------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LedPin = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  pinMode(LedPin, OUTPUT); <span class="comment">// 将引脚设置为输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  digitalWrite(LedPin, HIGH);  </span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">  digitalWrite(LedPin, LOW);</span><br><span class="line">  delay(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NodeMCU的GPIO口&quot;&gt;&lt;a href=&quot;#NodeMCU的GPIO口&quot; class=&quot;headerlink&quot; title=&quot;NodeMCU的GPIO口&quot;&gt;&lt;/a&gt;NodeMCU的GPIO口&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;Arduino的引脚号与NodeMCU的GPIO口直接对应,NodeMCU的GPIO函数pinMode,  digitalWrite, DigitalRead也是和Arduino中相同,如果要读取GPIO2引脚的电平，可以使用digitaiRead(2);引脚号0-15可以被用作INPUT,OUTPUT,或者INPUT_PULLUP。Pin16可以被用作INPUT,OUTPUT或INPUT_PULLDOWN_16,初始化时，所有引脚被配置为INPUT。&lt;br&gt;
    
    </summary>
    
      <category term="03 Geek" scheme="http://yoursite.com/categories/03-Geek/"/>
    
      <category term="NodeMCU开发" scheme="http://yoursite.com/categories/03-Geek/NodeMCU%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="单片机开发" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>NodeMCU学习(一):开始之前的准备</title>
    <link href="http://yoursite.com/2019/03/31/NodeMCU01/"/>
    <id>http://yoursite.com/2019/03/31/NodeMCU01/</id>
    <published>2019-03-31T06:55:33.000Z</published>
    <updated>2019-06-23T10:39:08.509Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装Aduino开发环境"><a href="#安装Aduino开发环境" class="headerlink" title="安装Aduino开发环境"></a>安装Aduino开发环境</h1><p>&nbsp;&nbsp;在官网中下载Arduino开发环境，或者在网盘中下载：<br>&nbsp;&nbsp;<a href="https://pan.baidu.com/s/1OjMhYgKOYW69YC2dEwFgyw" target="_blank" rel="noopener">https://pan.baidu.com/s/1OjMhYgKOYW69YC2dEwFgyw</a><br>&nbsp;&nbsp;提取码：ls15<a id="more"></a><br> <img src="/2019/03/31/NodeMCU01/MCU.jpg"> </p><h1 id="安装esp8266库文件"><a href="#安装esp8266库文件" class="headerlink" title="安装esp8266库文件"></a>安装esp8266库文件</h1><p>&nbsp;&nbsp;为了在Arduino的IDE中开发NodeMCU，必须在IDE中导入相关库文件，具体方法如下：打开Arduino的IDE工具栏选型-&gt;文件-&gt;首选项，进入到首选项更改界面，将库文件下载地址：<a href="http://arduino.esp8266.com/stable/package_esp8266com_index.json" target="_blank" rel="noopener">http://arduino.esp8266.com/stable/package_esp8266com_index.json</a> 填入到附加开发板管理器网址中后，选择“好”后退出首选项界面，同时重启Arduino的IDE。</p><img src="/2019/03/31/NodeMCU01/图片1.png" title="图1-1 填写库文件下载地址"> <p>&nbsp;&nbsp;重启后打开IDE工具栏选项-&gt;工具-&gt;开发板-&gt;开发板管理器,开始esp8266库文件的下载，下载时间稍长，需耐心等待。下载完成后会出现”INSTALLED”字样。同时在项目-&gt;开发板选项中会出现ESP系列开发板供选择。</p><img src="/2019/03/31/NodeMCU01/图片2.png" title="图1-2 在开发板管理器中下载库文件"><h1 id="使用NodeMCU进行串口通信"><a href="#使用NodeMCU进行串口通信" class="headerlink" title="使用NodeMCU进行串口通信"></a>使用NodeMCU进行串口通信</h1><p>&nbsp;&nbsp;在Arduino中新建项目文件命名为HelloNodeMcu.ino。开发板选项为NodeMCU1.0。验证代码没有语法错误后，上传代码到开发板中，上传完成后打开串口助手，将接收波特率设置为115200，此时如果串口助手接收到“HelloNode MCU”等字样，就代表esp8266库文件安装成功。</p><img src="/2019/03/31/NodeMCU01/图片3.png" title="图1-3 开发板选择"> <p>&nbsp;&nbsp;可以使用一个简单的串口通信的程序对库文件安装正确与否进行验证。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------------------------------</span></span><br><span class="line"><span class="comment">        written by helio, 2019</span></span><br><span class="line"><span class="comment">  HelloNodeMcu.ino - 串口测试程序</span></span><br><span class="line"><span class="comment">-------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ESP8266WiFi.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.print(<span class="string">"Hello NodeMCU\n"</span>);</span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"ChipId:%d\n"</span>, ESP.getChipId()); </span><br><span class="line">  Serial.<span class="built_in">printf</span>(<span class="string">"CpuFreq: %d MHz\n"</span>,ESP.getCpuFreqMHz()); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装Aduino开发环境&quot;&gt;&lt;a href=&quot;#安装Aduino开发环境&quot; class=&quot;headerlink&quot; title=&quot;安装Aduino开发环境&quot;&gt;&lt;/a&gt;安装Aduino开发环境&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;在官网中下载Arduino开发环境，或者在网盘中下载：&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;https://pan.baidu.com/s/1OjMhYgKOYW69YC2dEwFgyw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pan.baidu.com/s/1OjMhYgKOYW69YC2dEwFgyw&lt;/a&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;提取码：ls15
    
    </summary>
    
      <category term="03 Geek" scheme="http://yoursite.com/categories/03-Geek/"/>
    
      <category term="NodeMCU开发" scheme="http://yoursite.com/categories/03-Geek/NodeMCU%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="单片机开发" scheme="http://yoursite.com/tags/%E5%8D%95%E7%89%87%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>简单复数类的实现</title>
    <link href="http://yoursite.com/2019/03/08/MyComplex/"/>
    <id>http://yoursite.com/2019/03/08/MyComplex/</id>
    <published>2019-03-08T10:05:45.000Z</published>
    <updated>2019-05-16T07:54:31.047Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>  使用c++语言设计一个简单的复数类MyComplex，实现复数间的基本操作，同时重载八个基本运算符运算符：+ ,- ,<em> ,/ ,+= ,-= ,</em>= , /=,和输出运算符 &gt;&gt;，使得复数间的运算和输出变得和普通类型变量一样方便，最后使用主函数来测试类的功能是否完整。<br><a id="more"></a></p><h1 id="复数类的实现"><a href="#复数类的实现" class="headerlink" title="复数类的实现"></a>复数类的实现</h1><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>complex类的定义中包含了两个私有变量real, imag, 两个构造函数，和四个重载函数以及两个非重载成员函数的定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">complex</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">complex</span>(<span class="keyword">double</span> real, <span class="keyword">double</span> imag) :</span><br><span class="line">real(real), imag(imag) &#123; &#125;;</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">conj</span><span class="params">(<span class="keyword">const</span> <span class="keyword">complex</span>&amp;)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span>  <span class="title">Real</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> real;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span>  <span class="title">Imag</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> imag; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line"><span class="keyword">double</span> imag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类的私有变量"><a href="#类的私有变量" class="headerlink" title="类的私有变量"></a>类的私有变量</h2><p>类中有两个双精度浮点型私有变量, real、imag，分别代表复数的实部和虚部。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line"><span class="keyword">double</span> imag;</span><br></pre></td></tr></table></figure></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>通过构造函数实例化某个没有初始值的复数类,重载构造函数，从而可以通过构造函数将复数的实部和虚部放入到某个实例化的复数类中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">complex</span>(<span class="keyword">double</span> real, <span class="keyword">double</span> imag) : real(real), imag(imag) &#123;&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在类中重载四种算术运算符-”-”-“-“-“-”-“-“"><a href="#在类中重载四种算术运算符-”-”-“-“-“-”-“-“" class="headerlink" title="在类中重载四种算术运算符:”+”, “-“, “*”, “/“"></a>在类中重载四种算术运算符:”+”, “-“, “*”, “/“</h2><h3 id="复数的加法"><a href="#复数的加法" class="headerlink" title="复数的加法"></a>复数的加法</h3><p>在复数类中对加法运算符 “+” 实现了三种重载，分别实现三种情况下的复数相加：两个纯复数相加、实数与复数相加（实数在前）、实数与复数相加（实数在后）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y.Real(), x.Imag() + y.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y, x.Imag());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复数的减法"><a href="#复数的减法" class="headerlink" title="复数的减法"></a>复数的减法</h3><p>同样，在复数类中对减法运算符 “-”实现了三种重载，以满足三种情况下的复数相减。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y.Real(), x.Imag() - y.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y, x.Imag() * y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="复数的乘法"><a href="#复数的乘法" class="headerlink" title="复数的乘法"></a>复数的乘法</h3><p>在复数类中对乘法运算符 “*” 实现了三种重载，以满足三种情况下的复数相乘。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y, x.Imag() * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y, x.Imag() * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y.Real() - x.Imag() * y.Imag(), x.Real() * y.Imag() + x.Imag() * y.Real());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="复数的除法"><a href="#复数的除法" class="headerlink" title="复数的除法"></a>复数的除法</h3><p>同样的方法实现除法的重载。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() / y, x.Imag() / y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> coef = x.Real() * x.Real() + x.Imag() * x.Imag();</span><br><span class="line"><span class="keyword">complex</span> conj = <span class="keyword">complex</span>(x.Real(), -x.Imag());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(conj.Real() / coef, conj.Imag() / coef);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> coef = y.Real() * y.Real() + y.Imag() * y.Imag();</span><br><span class="line"><span class="keyword">complex</span> conj = <span class="keyword">complex</span>(y.Real(), -y.Imag());</span><br><span class="line"><span class="keyword">complex</span> Mul = x * conj;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(Mul.Real() / coef, Mul.Imag() / coef);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="在类中重载另外四种算术运算符-”-”-”-”-”-”-”-”"><a href="#在类中重载另外四种算术运算符-”-”-”-”-”-”-”-”" class="headerlink" title="在类中重载另外四种算术运算符:”+=”,”-=”,”*=”,”/=”"></a>在类中重载另外四种算术运算符:”+=”,”-=”,”*=”,”/=”</h2><p>由于这四种运算符会用到调用此运算符的类，属于特殊情况，所以将者四种重载函数作为复数类的成员函数。</p><h3 id="赋值运算符”-”的重载"><a href="#赋值运算符”-”的重载" class="headerlink" title="赋值运算符”+=”的重载"></a>赋值运算符”+=”的重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符”-”的重载-1"><a href="#赋值运算符”-”的重载-1" class="headerlink" title="赋值运算符”-=”的重载"></a>赋值运算符”-=”的重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span>::<span class="keyword">operator</span>-=(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> - x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符”-”的重载-2"><a href="#赋值运算符”-”的重载-2" class="headerlink" title="赋值运算符”*=”的重载"></a>赋值运算符”*=”的重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>*= (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符”-”的重载-3"><a href="#赋值运算符”-”的重载-3" class="headerlink" title="赋值运算符”/=”的重载"></a>赋值运算符”/=”的重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>/= (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> / x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在类中重载比较运算符-“-”-“-”"><a href="#在类中重载比较运算符-“-”-“-”" class="headerlink" title="在类中重载比较运算符: “==”, “!=”"></a>在类中重载比较运算符: “==”, “!=”</h2><p>为了对两个复数进行比较或者复数和实数间进行比较，所以重载这两个运算符。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y.Real() &amp;&amp; y.Imag() == y.Imag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y &amp;&amp; x.Imag() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y &amp;&amp; x.Imag() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() != y.Real() || x.Imag() != x.Imag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> <span class="keyword">complex</span>&amp; x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() != y || x.Imag() != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">double</span> x, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x != y.Real() || y.Imag() != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="输出运算符-“-lt-lt-”-的重载"><a href="#输出运算符-“-lt-lt-”-的重载" class="headerlink" title="输出运算符 “&lt;&lt;” 的重载"></a>输出运算符 “&lt;&lt;” 的重载</h2><p>为了使得复数的输出变得更加方便，可以在类的外部重载输出运算符。如当复数为 1 + 2i时，直接使用输出运算符在控制台中输出这个复数。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::ostream &amp;</span><br><span class="line"><span class="keyword">operator</span> (<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; x.Real() &lt;&lt; (x.Imag() &gt; <span class="number">0</span> ? <span class="string">"+"</span> : <span class="string">""</span>) &lt;&lt; x.Imag() &lt;&lt; <span class="string">"i"</span>; </span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="类的测试"><a href="#类的测试" class="headerlink" title="类的测试"></a>类的测试</h1><p>使用测试代码对复数类的函数进行测试。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"MyComplex.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">complex</span> <span class="title">c1</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">c2</span><span class="params">(<span class="number">-2</span>, <span class="number">-3</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">complex</span> <span class="title">c3</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="keyword">double</span> y = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 "&lt;&lt;" 运算符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1= "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c2= "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c3= "</span> &lt;&lt; c3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 “!=”, "==" 运算符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((c1 == c3) ? <span class="string">"c1 == c3"</span> : <span class="string">"c1 != c3"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ((c1 != c2) ? <span class="string">"c1 != c2"</span> : <span class="string">"c1 == c2"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 "+", "-", "*", "/" 运算符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1+c2="</span> &lt;&lt; c1 + c2 &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"c1+y="</span> &lt;&lt; c1 + y &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"y+c2="</span> &lt;&lt; y + c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1-c2="</span> &lt;&lt;  c1 - c2 &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"c2-y="</span> &lt;&lt; c2 - y &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"y-c2="</span> &lt;&lt; y - c2 &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1*c2="</span> &lt;&lt;  c1 * c2 &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"c1*y="</span> &lt;&lt; c1 * y &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"y*c1="</span> &lt;&lt; y * c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1/c2="</span> &lt;&lt;  c1 / c2 &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"c1/y="</span> &lt;&lt; c1 / y &lt;&lt; <span class="string">", "</span> &lt;&lt; <span class="string">"y/c1="</span> &lt;&lt; y * c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试 “+=”, "-=", "*=", "/=" 运算符</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 += c2 ="</span> &lt;&lt; (c1 += c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 -= c2 ="</span> &lt;&lt; (c1 -= c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 *= c2 ="</span> &lt;&lt; (c1 *= c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"c1 /= c2 ="</span> &lt;&lt; (c1 /= c2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><img src="/2019/03/08/MyComplex/complex.png" title="测试结果"><h1 id="MyComplex-h源码"><a href="#MyComplex-h源码" class="headerlink" title="MyComplex.h源码"></a>MyComplex.h源码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------------------------</span></span><br><span class="line"><span class="comment">written by helio, 2019</span></span><br><span class="line"><span class="comment">MyComplex.h - a simple complex class</span></span><br><span class="line"><span class="comment">--------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MY_COMPLEX_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MY_COMPLEX_H</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">complex</span>() = <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">complex</span>(<span class="keyword">double</span> real = <span class="number">0</span>, <span class="keyword">double</span> imag = <span class="number">0</span>) :</span><br><span class="line">real(real), imag(imag) &#123; &#125;;</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> -= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> *= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">operator</span> /= (<span class="keyword">const</span> <span class="keyword">complex</span>&amp;);</span><br><span class="line"> <span class="function"><span class="keyword">double</span>  <span class="title">Real</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> real;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span>  <span class="title">Imag</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> imag; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> real;</span><br><span class="line"><span class="keyword">double</span> imag;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y.Real(), x.Imag() + y.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() + y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y.Real(), x.Imag() - y.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() - y, x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y, x.Imag() * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y, x.Imag() * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() * y.Real() - x.Imag() * y.Imag(), x.Real() * y.Imag() + x.Imag() * y.Real());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(x.Real() / y, x.Imag() / y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> coef = x.Real() * x.Real() + x.Imag() * x.Imag();</span><br><span class="line"><span class="keyword">complex</span> conj = <span class="keyword">complex</span>(x.Real(), -x.Imag());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(conj.Real() / coef, conj.Imag() / coef);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> coef = y.Real() * y.Real() + y.Imag() * y.Imag();</span><br><span class="line"><span class="keyword">complex</span> conj = <span class="keyword">complex</span>(y.Real(), -y.Imag());</span><br><span class="line"><span class="keyword">complex</span> Mul = x * conj;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(Mul.Real() / coef, Mul.Imag() / coef);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>+=(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> + x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span>::<span class="keyword">operator</span>-=(<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> - x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>*= (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> * x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span>&amp; <span class="keyword">complex</span> :: <span class="keyword">operator</span>/= (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">*<span class="keyword">this</span> = *<span class="keyword">this</span> / x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> + (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">complex</span>(-x.Real(), -x.Imag());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y.Real() &amp;&amp; y.Imag() == y.Imag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">double</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y &amp;&amp; x.Imag() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> <span class="keyword">double</span> &amp;y, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() == y &amp;&amp; x.Imag() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> <span class="keyword">complex</span> &amp;x, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() != y.Real() || x.Imag() != x.Imag();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> <span class="keyword">complex</span>&amp; x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x.Real() != y || x.Imag() != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">double</span> x, <span class="keyword">const</span> <span class="keyword">complex</span>&amp; y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x != y.Real() || y.Imag() != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::ostream &amp;<span class="keyword">operator</span> &lt;&lt; (<span class="built_in">std</span>::ostream &amp;os, <span class="keyword">const</span> <span class="keyword">complex</span> &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">os &lt;&lt; x.Real() &lt;&lt; (x.Imag() &gt;= <span class="number">0</span> ? <span class="string">"+"</span> : <span class="string">""</span>) &lt;&lt; x.Imag() &lt;&lt; <span class="string">"i"</span>; </span><br><span class="line"><span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  使用c++语言设计一个简单的复数类MyComplex，实现复数间的基本操作，同时重载八个基本运算符运算符：+ ,- ,&lt;em&gt; ,/ ,+= ,-= ,&lt;/em&gt;= , /=,和输出运算符 &amp;gt;&amp;gt;，使得复数间的运算和输出变得和普通类型变量一样方便，最后使用主函数来测试类的功能是否完整。&lt;br&gt;
    
    </summary>
    
      <category term="01 C++基础" scheme="http://yoursite.com/categories/01-C-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="cpp" scheme="http://yoursite.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Good Bye,2018！</title>
    <link href="http://yoursite.com/2018/12/31/NewYear/"/>
    <id>http://yoursite.com/2018/12/31/NewYear/</id>
    <published>2018-12-31T03:09:17.000Z</published>
    <updated>2019-06-23T10:38:04.965Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你好，2019！</p><blockquote><p>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>望江南·超然台作</strong><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<strong>宋·苏轼</strong><br>&emsp;&emsp;<strong>春未老，风细柳斜斜。试上超然台上望，半壕春水一城花。烟雨暗千家.</strong><br>&emsp;&emsp;<strong>寒食后，酒醒却咨嗟。休对故人思故国，且将新火试新茶。诗酒趁年华。</strong> <a id="more"></a><br><img src="/2018/12/31/NewYear/face.jpg"><br>        <div id="aplayer-XbyQoWgY" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-XbyQoWgY"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "空帆船",              author: "朴树",              url: "http://lc-kcj3piop.cn-n1.lcfile.com/b505ba979c2c7d99106b.mp3",              pic: "http://lc-kcj3piop.cn-n1.lcfile.com/5d474b1d82c4177f1b6e.jpg",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script></p></blockquote><h1 id="我做了啥"><a href="#我做了啥" class="headerlink" title="我做了啥"></a><strong>我做了啥</strong></h1><p><strong>1~6月份</strong> 上课。<br><img src="/2018/12/31/NewYear/laopeng.jpg" title="老彭上课时偷拍的照片"><br>&emsp;&emsp;<strong>7月份</strong> 第一次参加电赛，为了完成电赛题目，和同学老师在实验室里熬了四天三夜。<br><img src="/2018/12/31/NewYear/作品.jpg" title="电赛完成的作品-手势识别装置"><br><img src="/2018/12/31/NewYear/li.jpg" title="李老师在调试作品"><br>&emsp;&emsp;<strong>9月份</strong> 参加全国大学生建模比赛，三个人一起在305实验室花了三天三夜的时间，终于完成了比赛论文并顺利提交。<br>&emsp;&emsp;<strong>10月份</strong> 游西安。<br><img src="/2018/12/31/NewYear/xian.jpg" title="西安城墙上"><br>&emsp;&emsp;<strong>12月份</strong> 参加电赛颁奖典礼。<br><img src="/2018/12/31/NewYear/banjiang.jpg" title="颁奖典礼"> </p><h1 id="GET到的新技能"><a href="#GET到的新技能" class="headerlink" title="GET到的新技能"></a><strong>GET到的新技能</strong></h1><h2 id="emsp-C"><a href="#emsp-C" class="headerlink" title="&emsp;C++"></a>&emsp;<del>C++</del></h2><p>&emsp;开学没过多久就加入了kwtool项目组，第一次接触C++语言和使用VisualC++开发Windows程序，慢慢的认识到从事Windows开发需要学习哪些东西，学会了怎样使用Winsows API进行Windows程序的编写。<br>    <img src="/2018/12/31/NewYear/book.jpg" title="新增了几本关于C++的书"> </p><h2 id="emsp-数据结构"><a href="#emsp-数据结构" class="headerlink" title="&emsp;数据结构"></a>&emsp;<del>数据结构</del></h2><p>&emsp;通过完成数据结构的实验(多项式的表示，赫夫曼树编码，迷宫问题，平衡二叉树的插入与删除)和观看MOOC上面的视频加上自己动手实现算法，已经对数据结构有初步的认识并可以实现一些问题的求解。</p><h2 id="emsp-Verilog"><a href="#emsp-Verilog" class="headerlink" title="&emsp;Verilog"></a>&emsp;<del>Verilog</del></h2><p>&emsp;自己动手完成了一个简易的数字钟（显示和调整时间加上闹钟功能），对Verilog语法有了基本上的认识已经不太困难的写Verilog代码。<br><img src="/2018/12/31/NewYear/heijin.jpg" title="使用黑金开发板做出来了数字钟"> </p><h2 id="emsp-个人博客"><a href="#emsp-个人博客" class="headerlink" title="&emsp;个人博客"></a>&emsp;<del>个人博客</del></h2><p>&emsp;花了两个星期的周末的时间，根据网上的各种帖子，将自己的个人博客搭建起来了。</p><h1 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h1><blockquote><p>不经一事，不长一智。  —曹雪芹</p></blockquote><h2 id="emsp-如何成为一名优秀的Windows开发程序员"><a href="#emsp-如何成为一名优秀的Windows开发程序员" class="headerlink" title="&emsp;如何成为一名优秀的Windows开发程序员"></a>&emsp;如何成为一名优秀的Windows开发程序员</h2><p>&emsp;下面这张图是根据博客园博主<a href="http://www.cppblog.com/weiym/" target="_blank" rel="noopener">厚积薄发</a>的图改编而成的.<br><img src="/2018/12/31/NewYear/Windows知识结构.png"><br>&emsp;个人认为归纳的特别好，要成为一名优秀的Windows程序员，或者说程序员，我觉得这些知识都是必不可少的，未来的学习方向也会根据这个规划啦。</p><h1 id="未来可期"><a href="#未来可期" class="headerlink" title="未来可期"></a>未来可期</h1><p>&emsp;#2019#<br>&emsp;2019年想做的事情就默默埋在心里好啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，2019！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&lt;strong&gt;望江南·超然台作&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&lt;strong&gt;宋·苏轼&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;春未老，风细柳斜斜。试上超然台上望，半壕春水一城花。烟雨暗千家.&lt;/strong&gt;&lt;br&gt;&amp;emsp;&amp;emsp;&lt;strong&gt;寒食后，酒醒却咨嗟。休对故人思故国，且将新火试新茶。诗酒趁年华。&lt;/strong&gt;
    
    </summary>
    
      <category term="02 随笔" scheme="http://yoursite.com/categories/02-%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>你好，之华</title>
    <link href="http://yoursite.com/2018/11/17/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E4%B9%8B%E5%8D%8E/"/>
    <id>http://yoursite.com/2018/11/17/你好，之华/</id>
    <published>2018-11-17T11:34:31.000Z</published>
    <updated>2019-06-23T10:38:43.692Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你好，之华：<br>&emsp;也许你已经不记得我了吧，我就是坐在你后面的那个腼腆、内向、不爱说话的那个男生。 <a id="more"></a><br>&emsp;当别人都在谈论你的姐姐如何优秀的时候。我的眼里却只有你，我喜欢在你身后偷偷的看你和别人疯闹、看你和别人说话，为你着迷。你还记得那个时候你的橡皮为什么老是在我这里找到吗？其实我撒谎了，你的橡皮并没有掉在地上去，也不是每次那么巧都被我捡到。而是每次我趁你不注意的时候，偷偷的把你的橡皮拿过来，我只是想在你每次回头找橡皮的时候和你说上两句话啊!<br>&emsp;那天早上我们班来了一个北京的孩子，他叫尹川，虽然是新来到我们班，但是他看起来没有丝毫的害羞与腼腆…..。从那以后我发现你的注意力完全被他吸引去了，你会去看他踢足球比赛，并且在看台上哈哈大笑，那种开心是我从来没有看到过的。你会在放学的路上和他以前踢足球，你还会去他家找他玩……。<br>有天下午，我看你哭着从他家跑了出来，他和他妹妹站在门口望着你，我不知道发生什么了，但我当时是和你一样特别难过，但我并没有去追上你，安慰你……。<br>从那以后，我发现你没有以前那么开心了，你也不常和别人打闹了，你经常坐在椅子上发呆，有时你会出去一会，然后回来时，眼镜是通红的。你也没有像以前那样关注尹川了。但是我还是像以前一样在你身后偷偷的看你。<br>&emsp;我现在也有了我的爱人和家。我写这封信是想告诉你，曾经有那么一个人喜欢你，为你着迷。<br>&emsp;&emsp;&emsp;勿念<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;小宇<br><img src="/2018/11/17/你好，之华/p2538035453.jpg"> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你好，之华：&lt;br&gt;&amp;emsp;也许你已经不记得我了吧，我就是坐在你后面的那个腼腆、内向、不爱说话的那个男生。
    
    </summary>
    
      <category term="02 随笔" scheme="http://yoursite.com/categories/02-%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>游仙岛湖</title>
    <link href="http://yoursite.com/2018/10/28/%E6%B8%B8%E4%BB%99%E5%B2%9B%E6%B9%96/"/>
    <id>http://yoursite.com/2018/10/28/游仙岛湖/</id>
    <published>2018-10-28T09:33:04.000Z</published>
    <updated>2019-06-23T10:38:37.632Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>启程</strong><br>&emsp;随着汽车在山间来回辗转，我们在车上睡了又醒，十一点左右终于到达了目的地——一个被群山包围着的小县城。沿街最多的就是卖水产的商店和挂着“住宿”招牌的房子，显然这是一个依靠旅游才发展起来的位置.<br><a id="more"></a><img src="/2018/10/28/游仙岛湖/IMG1.jpg"><br><img src="/2018/10/28/游仙岛湖/IMG_2770.jpg"><br>因为是淡季，所以并没有感到很拥挤，街上的车也不是很多，顺着坡下去，从入口进去我们就到了码头。<br><br><img src="/2018/10/28/游仙岛湖/IMG1.jpg" title="感觉很像游戏中的那种码头"><br><strong>登船</strong><br>&emsp;在码头船上等了十几分钟后，它就载着我们往湖中去了，站在船尾，湖面上的暖风迎面而来，船尾是因发动机运转而激起的水花，放眼望去，有蓝色的湖水和环绕着湖水的远山，顿时觉得心旷神怡。<br>&emsp;如果此时你问我是喜欢水还是喜欢山，那我一定会肯定的回答：水。<br><img src="/2018/10/28/游仙岛湖/IMG_2784.jpg"><br><img src="/2018/10/28/游仙岛湖/IMG_2790.jpg"><br><img src="/2018/10/28/游仙岛湖/IMG_2791.jpg"><br><img src="/2018/10/28/游仙岛湖/IMG_2793.jpg" title="船长翘着二郎腿在开船"><br><img src="/2018/10/28/游仙岛湖/IMG_2830.JPG" title="船尾的彩虹"> </p><p><strong>尽兴而归</strong><br>&emsp;我们分别在两座小岛上转了一圈后，已经快下午五点了，已而夕阳在山，人影散乱，我们也匆匆忙忙的往返程的游船上赶。<br><img src="/2018/10/28/游仙岛湖/IMG_2863.JPG"><br><img src="/2018/10/28/游仙岛湖/IMG_2865.JPG"><br><strong>人在囧途</strong><br>&emsp;当我们从船上下来准备返程是，我们发现一个严重的问题，返回阳新城的班车早已发完，我们在小县城的街道上游荡了好久才找到返回的车辆，当然是价格没有商量的那种。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;启程&lt;/strong&gt;&lt;br&gt;&amp;emsp;随着汽车在山间来回辗转，我们在车上睡了又醒，十一点左右终于到达了目的地——一个被群山包围着的小县城。沿街最多的就是卖水产的商店和挂着“住宿”招牌的房子，显然这是一个依靠旅游才发展起来的位置.&lt;br&gt;
    
    </summary>
    
      <category term="02 随笔" scheme="http://yoursite.com/categories/02-%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello</title>
    <link href="http://yoursite.com/2018/10/24/hello/"/>
    <id>http://yoursite.com/2018/10/24/hello/</id>
    <published>2018-10-24T12:24:40.000Z</published>
    <updated>2019-06-23T10:52:45.532Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;Welcome to Helio Blog<br><a id="more"></a>&emsp;&emsp;永远相信美好的事情即将发生！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;Welcome to Helio Blog&lt;br&gt;
    
    </summary>
    
      <category term="02 随笔" scheme="http://yoursite.com/categories/02-%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
